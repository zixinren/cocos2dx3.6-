// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_EXPORTJSONBINARY_EXPORTJSON_H_
#define FLATBUFFERS_GENERATED_EXPORTJSONBINARY_EXPORTJSON_H_

#include "flatbuffers/flatbuffers.h"


namespace ExportJson {

struct JColor;
struct ExportJsonBinary;
struct JTextureData;
struct JArmatureData;
struct JBoneData;
struct JDisplayData;
struct JSpriteDisplayData;
struct JSkinData;
struct JArmatureDisplayData;
struct JParticleDisplayData;
struct JAnimationData;
struct JMovementData;
struct JMovementBoneData;
struct JFrameData;

MANUALLY_ALIGNED_STRUCT(1) JColor {
 private:
  uint8_t a_;
  uint8_t r_;
  uint8_t g_;
  uint8_t b_;

 public:
  JColor(uint8_t a, uint8_t r, uint8_t g, uint8_t b)
    : a_(flatbuffers::EndianScalar(a)), r_(flatbuffers::EndianScalar(r)), g_(flatbuffers::EndianScalar(g)), b_(flatbuffers::EndianScalar(b)) { }

  uint8_t a() const { return flatbuffers::EndianScalar(a_); }
  uint8_t r() const { return flatbuffers::EndianScalar(r_); }
  uint8_t g() const { return flatbuffers::EndianScalar(g_); }
  uint8_t b() const { return flatbuffers::EndianScalar(b_); }
};
STRUCT_END(JColor, 4);

struct ExportJsonBinary : private flatbuffers::Table {
  float contentScale() const { return GetField<float>(4, 1.0); }
  const flatbuffers::Vector<flatbuffers::Offset<JArmatureData>> *armatureData() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<JArmatureData>> *>(6); }
  const flatbuffers::Vector<flatbuffers::Offset<JAnimationData>> *animationData() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<JAnimationData>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<JTextureData>> *textureDatas() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<JTextureData>> *>(10); }
  const flatbuffers::String *mdpath() const { return GetPointer<const flatbuffers::String *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* contentScale */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* armatureData */) &&
           verifier.Verify(armatureData()) &&
           verifier.VerifyVectorOfTables(armatureData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* animationData */) &&
           verifier.Verify(animationData()) &&
           verifier.VerifyVectorOfTables(animationData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* textureDatas */) &&
           verifier.Verify(textureDatas()) &&
           verifier.VerifyVectorOfTables(textureDatas()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* mdpath */) &&
           verifier.Verify(mdpath()) &&
           verifier.EndTable();
  }
};

struct ExportJsonBinaryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_contentScale(float contentScale) { fbb_.AddElement<float>(4, contentScale, 1.0); }
  void add_armatureData(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JArmatureData>>> armatureData) { fbb_.AddOffset(6, armatureData); }
  void add_animationData(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JAnimationData>>> animationData) { fbb_.AddOffset(8, animationData); }
  void add_textureDatas(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JTextureData>>> textureDatas) { fbb_.AddOffset(10, textureDatas); }
  void add_mdpath(flatbuffers::Offset<flatbuffers::String> mdpath) { fbb_.AddOffset(12, mdpath); }
  ExportJsonBinaryBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ExportJsonBinaryBuilder &operator=(const ExportJsonBinaryBuilder &);
  flatbuffers::Offset<ExportJsonBinary> Finish() {
    auto o = flatbuffers::Offset<ExportJsonBinary>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<ExportJsonBinary> CreateExportJsonBinary(flatbuffers::FlatBufferBuilder &_fbb,
   float contentScale = 1.0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JArmatureData>>> armatureData = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JAnimationData>>> animationData = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JTextureData>>> textureDatas = 0,
   flatbuffers::Offset<flatbuffers::String> mdpath = 0) {
  ExportJsonBinaryBuilder builder_(_fbb);
  builder_.add_mdpath(mdpath);
  builder_.add_textureDatas(textureDatas);
  builder_.add_animationData(animationData);
  builder_.add_armatureData(armatureData);
  builder_.add_contentScale(contentScale);
  return builder_.Finish();
}

struct JTextureData : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  uint16_t width() const { return GetField<uint16_t>(6, 0); }
  uint16_t height() const { return GetField<uint16_t>(8, 0); }
  float pivotX() const { return GetField<float>(10, 0.5); }
  float pivotY() const { return GetField<float>(12, 0.5); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<uint16_t>(verifier, 6 /* width */) &&
           VerifyField<uint16_t>(verifier, 8 /* height */) &&
           VerifyField<float>(verifier, 10 /* pivotX */) &&
           VerifyField<float>(verifier, 12 /* pivotY */) &&
           verifier.EndTable();
  }
};

struct JTextureDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_width(uint16_t width) { fbb_.AddElement<uint16_t>(6, width, 0); }
  void add_height(uint16_t height) { fbb_.AddElement<uint16_t>(8, height, 0); }
  void add_pivotX(float pivotX) { fbb_.AddElement<float>(10, pivotX, 0.5); }
  void add_pivotY(float pivotY) { fbb_.AddElement<float>(12, pivotY, 0.5); }
  JTextureDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JTextureDataBuilder &operator=(const JTextureDataBuilder &);
  flatbuffers::Offset<JTextureData> Finish() {
    auto o = flatbuffers::Offset<JTextureData>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<JTextureData> CreateJTextureData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   uint16_t width = 0,
   uint16_t height = 0,
   float pivotX = 0.5,
   float pivotY = 0.5) {
  JTextureDataBuilder builder_(_fbb);
  builder_.add_pivotY(pivotY);
  builder_.add_pivotX(pivotX);
  builder_.add_name(name);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

struct JArmatureData : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  float version() const { return GetField<float>(6, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<JBoneData>> *boneDataDic() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<JBoneData>> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<float>(verifier, 6 /* version */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* boneDataDic */) &&
           verifier.Verify(boneDataDic()) &&
           verifier.VerifyVectorOfTables(boneDataDic()) &&
           verifier.EndTable();
  }
};

struct JArmatureDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_version(float version) { fbb_.AddElement<float>(6, version, 0); }
  void add_boneDataDic(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JBoneData>>> boneDataDic) { fbb_.AddOffset(8, boneDataDic); }
  JArmatureDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JArmatureDataBuilder &operator=(const JArmatureDataBuilder &);
  flatbuffers::Offset<JArmatureData> Finish() {
    auto o = flatbuffers::Offset<JArmatureData>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<JArmatureData> CreateJArmatureData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   float version = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JBoneData>>> boneDataDic = 0) {
  JArmatureDataBuilder builder_(_fbb);
  builder_.add_boneDataDic(boneDataDic);
  builder_.add_version(version);
  builder_.add_name(name);
  return builder_.Finish();
}

struct JBoneData : private flatbuffers::Table {
  float x() const { return GetField<float>(4, 0.0); }
  float y() const { return GetField<float>(6, 0.0); }
  int16_t zOrder() const { return GetField<int16_t>(8, 0); }
  float skewX() const { return GetField<float>(10, 0.0); }
  float skewY() const { return GetField<float>(12, 0.0); }
  float scaleX() const { return GetField<float>(14, 1.0); }
  float scaleY() const { return GetField<float>(16, 1.0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(18); }
  const flatbuffers::String *parentName() const { return GetPointer<const flatbuffers::String *>(20); }
  const flatbuffers::Vector<flatbuffers::Offset<JDisplayData>> *displayDataList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<JDisplayData>> *>(22); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* x */) &&
           VerifyField<float>(verifier, 6 /* y */) &&
           VerifyField<int16_t>(verifier, 8 /* zOrder */) &&
           VerifyField<float>(verifier, 10 /* skewX */) &&
           VerifyField<float>(verifier, 12 /* skewY */) &&
           VerifyField<float>(verifier, 14 /* scaleX */) &&
           VerifyField<float>(verifier, 16 /* scaleY */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* parentName */) &&
           verifier.Verify(parentName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 22 /* displayDataList */) &&
           verifier.Verify(displayDataList()) &&
           verifier.VerifyVectorOfTables(displayDataList()) &&
           verifier.EndTable();
  }
};

struct JBoneDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(4, x, 0.0); }
  void add_y(float y) { fbb_.AddElement<float>(6, y, 0.0); }
  void add_zOrder(int16_t zOrder) { fbb_.AddElement<int16_t>(8, zOrder, 0); }
  void add_skewX(float skewX) { fbb_.AddElement<float>(10, skewX, 0.0); }
  void add_skewY(float skewY) { fbb_.AddElement<float>(12, skewY, 0.0); }
  void add_scaleX(float scaleX) { fbb_.AddElement<float>(14, scaleX, 1.0); }
  void add_scaleY(float scaleY) { fbb_.AddElement<float>(16, scaleY, 1.0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(18, name); }
  void add_parentName(flatbuffers::Offset<flatbuffers::String> parentName) { fbb_.AddOffset(20, parentName); }
  void add_displayDataList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JDisplayData>>> displayDataList) { fbb_.AddOffset(22, displayDataList); }
  JBoneDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JBoneDataBuilder &operator=(const JBoneDataBuilder &);
  flatbuffers::Offset<JBoneData> Finish() {
    auto o = flatbuffers::Offset<JBoneData>(fbb_.EndTable(start_, 10));
    return o;
  }
};

inline flatbuffers::Offset<JBoneData> CreateJBoneData(flatbuffers::FlatBufferBuilder &_fbb,
   float x = 0.0,
   float y = 0.0,
   int16_t zOrder = 0,
   float skewX = 0.0,
   float skewY = 0.0,
   float scaleX = 1.0,
   float scaleY = 1.0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> parentName = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JDisplayData>>> displayDataList = 0) {
  JBoneDataBuilder builder_(_fbb);
  builder_.add_displayDataList(displayDataList);
  builder_.add_parentName(parentName);
  builder_.add_name(name);
  builder_.add_scaleY(scaleY);
  builder_.add_scaleX(scaleX);
  builder_.add_skewY(skewY);
  builder_.add_skewX(skewX);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_zOrder(zOrder);
  return builder_.Finish();
}

struct JDisplayData : private flatbuffers::Table {
  uint8_t displayType() const { return GetField<uint8_t>(4, 0); }
  const JSpriteDisplayData *sprite() const { return GetPointer<const JSpriteDisplayData *>(6); }
  const JArmatureDisplayData *armature() const { return GetPointer<const JArmatureDisplayData *>(8); }
  const JParticleDisplayData *particle() const { return GetPointer<const JParticleDisplayData *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* displayType */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* sprite */) &&
           verifier.VerifyTable(sprite()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* armature */) &&
           verifier.VerifyTable(armature()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* particle */) &&
           verifier.VerifyTable(particle()) &&
           verifier.EndTable();
  }
};

struct JDisplayDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_displayType(uint8_t displayType) { fbb_.AddElement<uint8_t>(4, displayType, 0); }
  void add_sprite(flatbuffers::Offset<JSpriteDisplayData> sprite) { fbb_.AddOffset(6, sprite); }
  void add_armature(flatbuffers::Offset<JArmatureDisplayData> armature) { fbb_.AddOffset(8, armature); }
  void add_particle(flatbuffers::Offset<JParticleDisplayData> particle) { fbb_.AddOffset(10, particle); }
  JDisplayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JDisplayDataBuilder &operator=(const JDisplayDataBuilder &);
  flatbuffers::Offset<JDisplayData> Finish() {
    auto o = flatbuffers::Offset<JDisplayData>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<JDisplayData> CreateJDisplayData(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t displayType = 0,
   flatbuffers::Offset<JSpriteDisplayData> sprite = 0,
   flatbuffers::Offset<JArmatureDisplayData> armature = 0,
   flatbuffers::Offset<JParticleDisplayData> particle = 0) {
  JDisplayDataBuilder builder_(_fbb);
  builder_.add_particle(particle);
  builder_.add_armature(armature);
  builder_.add_sprite(sprite);
  builder_.add_displayType(displayType);
  return builder_.Finish();
}

struct JSpriteDisplayData : private flatbuffers::Table {
  const flatbuffers::String *displayName() const { return GetPointer<const flatbuffers::String *>(4); }
  const JSkinData *skinData() const { return GetPointer<const JSkinData *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* displayName */) &&
           verifier.Verify(displayName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* skinData */) &&
           verifier.VerifyTable(skinData()) &&
           verifier.EndTable();
  }
};

struct JSpriteDisplayDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_displayName(flatbuffers::Offset<flatbuffers::String> displayName) { fbb_.AddOffset(4, displayName); }
  void add_skinData(flatbuffers::Offset<JSkinData> skinData) { fbb_.AddOffset(6, skinData); }
  JSpriteDisplayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JSpriteDisplayDataBuilder &operator=(const JSpriteDisplayDataBuilder &);
  flatbuffers::Offset<JSpriteDisplayData> Finish() {
    auto o = flatbuffers::Offset<JSpriteDisplayData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<JSpriteDisplayData> CreateJSpriteDisplayData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> displayName = 0,
   flatbuffers::Offset<JSkinData> skinData = 0) {
  JSpriteDisplayDataBuilder builder_(_fbb);
  builder_.add_skinData(skinData);
  builder_.add_displayName(displayName);
  return builder_.Finish();
}

struct JSkinData : private flatbuffers::Table {
  float x() const { return GetField<float>(4, 0.0); }
  float y() const { return GetField<float>(6, 0.0); }
  float scaleX() const { return GetField<float>(8, 1.0); }
  float scaleY() const { return GetField<float>(10, 1.0); }
  float skewX() const { return GetField<float>(12, 0.0); }
  float skewY() const { return GetField<float>(14, 0.0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* x */) &&
           VerifyField<float>(verifier, 6 /* y */) &&
           VerifyField<float>(verifier, 8 /* scaleX */) &&
           VerifyField<float>(verifier, 10 /* scaleY */) &&
           VerifyField<float>(verifier, 12 /* skewX */) &&
           VerifyField<float>(verifier, 14 /* skewY */) &&
           verifier.EndTable();
  }
};

struct JSkinDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(4, x, 0.0); }
  void add_y(float y) { fbb_.AddElement<float>(6, y, 0.0); }
  void add_scaleX(float scaleX) { fbb_.AddElement<float>(8, scaleX, 1.0); }
  void add_scaleY(float scaleY) { fbb_.AddElement<float>(10, scaleY, 1.0); }
  void add_skewX(float skewX) { fbb_.AddElement<float>(12, skewX, 0.0); }
  void add_skewY(float skewY) { fbb_.AddElement<float>(14, skewY, 0.0); }
  JSkinDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JSkinDataBuilder &operator=(const JSkinDataBuilder &);
  flatbuffers::Offset<JSkinData> Finish() {
    auto o = flatbuffers::Offset<JSkinData>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<JSkinData> CreateJSkinData(flatbuffers::FlatBufferBuilder &_fbb,
   float x = 0.0,
   float y = 0.0,
   float scaleX = 1.0,
   float scaleY = 1.0,
   float skewX = 0.0,
   float skewY = 0.0) {
  JSkinDataBuilder builder_(_fbb);
  builder_.add_skewY(skewY);
  builder_.add_skewX(skewX);
  builder_.add_scaleY(scaleY);
  builder_.add_scaleX(scaleX);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct JArmatureDisplayData : private flatbuffers::Table {
  const flatbuffers::String *displayName() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* displayName */) &&
           verifier.Verify(displayName()) &&
           verifier.EndTable();
  }
};

struct JArmatureDisplayDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_displayName(flatbuffers::Offset<flatbuffers::String> displayName) { fbb_.AddOffset(4, displayName); }
  JArmatureDisplayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JArmatureDisplayDataBuilder &operator=(const JArmatureDisplayDataBuilder &);
  flatbuffers::Offset<JArmatureDisplayData> Finish() {
    auto o = flatbuffers::Offset<JArmatureDisplayData>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<JArmatureDisplayData> CreateJArmatureDisplayData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> displayName = 0) {
  JArmatureDisplayDataBuilder builder_(_fbb);
  builder_.add_displayName(displayName);
  return builder_.Finish();
}

struct JParticleDisplayData : private flatbuffers::Table {
  const flatbuffers::String *plist() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* plist */) &&
           verifier.Verify(plist()) &&
           verifier.EndTable();
  }
};

struct JParticleDisplayDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_plist(flatbuffers::Offset<flatbuffers::String> plist) { fbb_.AddOffset(4, plist); }
  JParticleDisplayDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JParticleDisplayDataBuilder &operator=(const JParticleDisplayDataBuilder &);
  flatbuffers::Offset<JParticleDisplayData> Finish() {
    auto o = flatbuffers::Offset<JParticleDisplayData>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<JParticleDisplayData> CreateJParticleDisplayData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> plist = 0) {
  JParticleDisplayDataBuilder builder_(_fbb);
  builder_.add_plist(plist);
  return builder_.Finish();
}

struct JAnimationData : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<JMovementData>> *movementDataDic() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<JMovementData>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* movementDataDic */) &&
           verifier.Verify(movementDataDic()) &&
           verifier.VerifyVectorOfTables(movementDataDic()) &&
           verifier.EndTable();
  }
};

struct JAnimationDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_movementDataDic(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JMovementData>>> movementDataDic) { fbb_.AddOffset(6, movementDataDic); }
  JAnimationDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JAnimationDataBuilder &operator=(const JAnimationDataBuilder &);
  flatbuffers::Offset<JAnimationData> Finish() {
    auto o = flatbuffers::Offset<JAnimationData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<JAnimationData> CreateJAnimationData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JMovementData>>> movementDataDic = 0) {
  JAnimationDataBuilder builder_(_fbb);
  builder_.add_movementDataDic(movementDataDic);
  builder_.add_name(name);
  return builder_.Finish();
}

struct JMovementData : private flatbuffers::Table {
  uint8_t loop() const { return GetField<uint8_t>(4, 0); }
  uint16_t durationTween() const { return GetField<uint16_t>(6, 0); }
  uint16_t durationTo() const { return GetField<uint16_t>(8, 0); }
  uint16_t duration() const { return GetField<uint16_t>(10, 0); }
  float scale() const { return GetField<float>(12, 1.0); }
  uint8_t tweenEasing() const { return GetField<uint8_t>(14, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(16); }
  const flatbuffers::Vector<flatbuffers::Offset<JMovementBoneData>> *movBoneDataDic() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<JMovementBoneData>> *>(18); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* loop */) &&
           VerifyField<uint16_t>(verifier, 6 /* durationTween */) &&
           VerifyField<uint16_t>(verifier, 8 /* durationTo */) &&
           VerifyField<uint16_t>(verifier, 10 /* duration */) &&
           VerifyField<float>(verifier, 12 /* scale */) &&
           VerifyField<uint8_t>(verifier, 14 /* tweenEasing */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* movBoneDataDic */) &&
           verifier.Verify(movBoneDataDic()) &&
           verifier.VerifyVectorOfTables(movBoneDataDic()) &&
           verifier.EndTable();
  }
};

struct JMovementDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_loop(uint8_t loop) { fbb_.AddElement<uint8_t>(4, loop, 0); }
  void add_durationTween(uint16_t durationTween) { fbb_.AddElement<uint16_t>(6, durationTween, 0); }
  void add_durationTo(uint16_t durationTo) { fbb_.AddElement<uint16_t>(8, durationTo, 0); }
  void add_duration(uint16_t duration) { fbb_.AddElement<uint16_t>(10, duration, 0); }
  void add_scale(float scale) { fbb_.AddElement<float>(12, scale, 1.0); }
  void add_tweenEasing(uint8_t tweenEasing) { fbb_.AddElement<uint8_t>(14, tweenEasing, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(16, name); }
  void add_movBoneDataDic(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JMovementBoneData>>> movBoneDataDic) { fbb_.AddOffset(18, movBoneDataDic); }
  JMovementDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JMovementDataBuilder &operator=(const JMovementDataBuilder &);
  flatbuffers::Offset<JMovementData> Finish() {
    auto o = flatbuffers::Offset<JMovementData>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<JMovementData> CreateJMovementData(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t loop = 0,
   uint16_t durationTween = 0,
   uint16_t durationTo = 0,
   uint16_t duration = 0,
   float scale = 1.0,
   uint8_t tweenEasing = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JMovementBoneData>>> movBoneDataDic = 0) {
  JMovementDataBuilder builder_(_fbb);
  builder_.add_movBoneDataDic(movBoneDataDic);
  builder_.add_name(name);
  builder_.add_scale(scale);
  builder_.add_duration(duration);
  builder_.add_durationTo(durationTo);
  builder_.add_durationTween(durationTween);
  builder_.add_tweenEasing(tweenEasing);
  builder_.add_loop(loop);
  return builder_.Finish();
}

struct JMovementBoneData : private flatbuffers::Table {
  float delay() const { return GetField<float>(4, 0.0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::Vector<flatbuffers::Offset<JFrameData>> *frameList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<JFrameData>> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* delay */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* frameList */) &&
           verifier.Verify(frameList()) &&
           verifier.VerifyVectorOfTables(frameList()) &&
           verifier.EndTable();
  }
};

struct JMovementBoneDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_delay(float delay) { fbb_.AddElement<float>(4, delay, 0.0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(6, name); }
  void add_frameList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JFrameData>>> frameList) { fbb_.AddOffset(8, frameList); }
  JMovementBoneDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JMovementBoneDataBuilder &operator=(const JMovementBoneDataBuilder &);
  flatbuffers::Offset<JMovementBoneData> Finish() {
    auto o = flatbuffers::Offset<JMovementBoneData>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<JMovementBoneData> CreateJMovementBoneData(flatbuffers::FlatBufferBuilder &_fbb,
   float delay = 0.0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JFrameData>>> frameList = 0) {
  JMovementBoneDataBuilder builder_(_fbb);
  builder_.add_frameList(frameList);
  builder_.add_name(name);
  builder_.add_delay(delay);
  return builder_.Finish();
}

struct JFrameData : private flatbuffers::Table {
  float x() const { return GetField<float>(4, 0.0); }
  float y() const { return GetField<float>(6, 0.0); }
  int16_t zOrder() const { return GetField<int16_t>(8, 0); }
  float skewX() const { return GetField<float>(10, 0.0); }
  float skewY() const { return GetField<float>(12, 0.0); }
  float scaleX() const { return GetField<float>(14, 1.0); }
  float scaleY() const { return GetField<float>(16, 1.0); }
  uint8_t isUseColorInfo() const { return GetField<uint8_t>(18, 0); }
  const JColor *color() const { return GetStruct<const JColor *>(20); }
  uint8_t tweenEasing() const { return GetField<uint8_t>(22, 0); }
  int16_t displayIndex() const { return GetField<int16_t>(24, 0); }
  uint8_t isTween() const { return GetField<uint8_t>(26, 1); }
  const flatbuffers::String *strEvent() const { return GetPointer<const flatbuffers::String *>(28); }
  int16_t frameIndex() const { return GetField<int16_t>(30, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* x */) &&
           VerifyField<float>(verifier, 6 /* y */) &&
           VerifyField<int16_t>(verifier, 8 /* zOrder */) &&
           VerifyField<float>(verifier, 10 /* skewX */) &&
           VerifyField<float>(verifier, 12 /* skewY */) &&
           VerifyField<float>(verifier, 14 /* scaleX */) &&
           VerifyField<float>(verifier, 16 /* scaleY */) &&
           VerifyField<uint8_t>(verifier, 18 /* isUseColorInfo */) &&
           VerifyField<JColor>(verifier, 20 /* color */) &&
           VerifyField<uint8_t>(verifier, 22 /* tweenEasing */) &&
           VerifyField<int16_t>(verifier, 24 /* displayIndex */) &&
           VerifyField<uint8_t>(verifier, 26 /* isTween */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 28 /* strEvent */) &&
           verifier.Verify(strEvent()) &&
           VerifyField<int16_t>(verifier, 30 /* frameIndex */) &&
           verifier.EndTable();
  }
};

struct JFrameDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(4, x, 0.0); }
  void add_y(float y) { fbb_.AddElement<float>(6, y, 0.0); }
  void add_zOrder(int16_t zOrder) { fbb_.AddElement<int16_t>(8, zOrder, 0); }
  void add_skewX(float skewX) { fbb_.AddElement<float>(10, skewX, 0.0); }
  void add_skewY(float skewY) { fbb_.AddElement<float>(12, skewY, 0.0); }
  void add_scaleX(float scaleX) { fbb_.AddElement<float>(14, scaleX, 1.0); }
  void add_scaleY(float scaleY) { fbb_.AddElement<float>(16, scaleY, 1.0); }
  void add_isUseColorInfo(uint8_t isUseColorInfo) { fbb_.AddElement<uint8_t>(18, isUseColorInfo, 0); }
  void add_color(const JColor *color) { fbb_.AddStruct(20, color); }
  void add_tweenEasing(uint8_t tweenEasing) { fbb_.AddElement<uint8_t>(22, tweenEasing, 0); }
  void add_displayIndex(int16_t displayIndex) { fbb_.AddElement<int16_t>(24, displayIndex, 0); }
  void add_isTween(uint8_t isTween) { fbb_.AddElement<uint8_t>(26, isTween, 1); }
  void add_strEvent(flatbuffers::Offset<flatbuffers::String> strEvent) { fbb_.AddOffset(28, strEvent); }
  void add_frameIndex(int16_t frameIndex) { fbb_.AddElement<int16_t>(30, frameIndex, 0); }
  JFrameDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  JFrameDataBuilder &operator=(const JFrameDataBuilder &);
  flatbuffers::Offset<JFrameData> Finish() {
    auto o = flatbuffers::Offset<JFrameData>(fbb_.EndTable(start_, 14));
    return o;
  }
};

inline flatbuffers::Offset<JFrameData> CreateJFrameData(flatbuffers::FlatBufferBuilder &_fbb,
   float x = 0.0,
   float y = 0.0,
   int16_t zOrder = 0,
   float skewX = 0.0,
   float skewY = 0.0,
   float scaleX = 1.0,
   float scaleY = 1.0,
   uint8_t isUseColorInfo = 0,
   const JColor *color = 0,
   uint8_t tweenEasing = 0,
   int16_t displayIndex = 0,
   uint8_t isTween = 1,
   flatbuffers::Offset<flatbuffers::String> strEvent = 0,
   int16_t frameIndex = 0) {
  JFrameDataBuilder builder_(_fbb);
  builder_.add_strEvent(strEvent);
  builder_.add_color(color);
  builder_.add_scaleY(scaleY);
  builder_.add_scaleX(scaleX);
  builder_.add_skewY(skewY);
  builder_.add_skewX(skewX);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_frameIndex(frameIndex);
  builder_.add_displayIndex(displayIndex);
  builder_.add_zOrder(zOrder);
  builder_.add_isTween(isTween);
  builder_.add_tweenEasing(tweenEasing);
  builder_.add_isUseColorInfo(isUseColorInfo);
  return builder_.Finish();
}

inline const ExportJsonBinary *GetExportJsonBinary(const void *buf) { return flatbuffers::GetRoot<ExportJsonBinary>(buf); }

inline bool VerifyExportJsonBinaryBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<ExportJsonBinary>(); }

inline void FinishExportJsonBinaryBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ExportJsonBinary> root) { fbb.Finish(root); }

}  // namespace ExportJson

#endif  // FLATBUFFERS_GENERATED_EXPORTJSONBINARY_EXPORTJSON_H_
